CREATE TABLE clientes (
 codigo INT,
 nome VARCHAR(70) NOT NULL,
 nome_social VARCHAR(10) NULL,
 email VARCHAR(70) ,
 data_cadastro DATE DEFAULT SYSDATE,
 situacao VARCHAR(7) DEFAULT 'A',
 -- Restrições da tabela / atributos
 CONSTRAINT cliente_codigo_pk PRIMARY KEY (codigo),
 CONSTRAINT cliente_situacao_ck CHECK ( situacao IN ('A','B')),
 CONSTRAINT cliente_email_un UNIQUE(email)
);


-- Paciente
CREATE TABLE pacientes (
    id_paciente      NUMBER GENERATED BY DEFAULT AS IDENTITY,
    nome             VARCHAR(50) NOT NULL,
    idade            NUMBER(3) NOT NULL,
    nascimento       VARCHAR(10),
    estado_civil     VARCHAR(30) NOT NULL,
    CONSTRAINT paciente_pk PRIMARY KEY (id_paciente),
    CONSTRAINT paciente_nome_uk UNIQUE (nome)
);

-- Documento
CREATE TABLE documentos (
    id_documento     NUMBER GENERATED BY DEFAULT AS IDENTITY,
    cpf              VARCHAR(11) NOT NULL,
    rg               VARCHAR(20) NOT NULL,
    telefone         VARCHAR(20) NOT NULL,
    id_paciente      NUMBER NOT NULL,
    CONSTRAINT documento_pk PRIMARY KEY (id_documento),
    CONSTRAINT documento_cpf_uk UNIQUE (cpf),
    CONSTRAINT documento_rg_uk UNIQUE (rg),
    CONSTRAINT documento_paciente_fk FOREIGN KEY (id_paciente)
        REFERENCES pacientes(id_paciente)
);

-- Login
CREATE TABLE logins_pacientes(
    id_login         NUMBER GENERATED BY DEFAULT AS IDENTITY,
    usuario          VARCHAR(50) NOT NULL,
    senha            VARCHAR(255) NOT NULL,
    id_paciente      NUMBER NOT NULL,
    CONSTRAINT login_paciente_pk PRIMARY KEY (id_login),
    CONSTRAINT login_paciente_usuario_uk UNIQUE (usuario),
    CONSTRAINT login_paciente_fk FOREIGN KEY (id_paciente)
        REFERENCES pacientes(id_paciente)
);

-- Endereço
CREATE TABLE enderecos (
    id_endereco      NUMBER GENERATED BY DEFAULT AS IDENTITY,
    cep              CHAR(8) NOT NULL,
    logradouro       VARCHAR(150) NOT NULL,
    numero           VARCHAR(10) NOT NULL,
    complemento      VARCHAR(50),
    bairro           VARCHAR(100) NOT NULL,
    cidade           VARCHAR(100) NOT NULL,
    estado           CHAR(2) NOT NULL,
    id_paciente      NUMBER NOT NULL,
    CONSTRAINT endereco_pk PRIMARY KEY (id_endereco),
    CONSTRAINT endereco_paciente_fk FOREIGN KEY (id_paciente)
        References pacientes(id_paciente)
);

-- Consulta
CREATE TABLE consultas (
    id_consulta      NUMBER GENERATED BY DEFAULT AS IDENTITY,
    especialidade    VARCHAR(100) NOT NULL,
    medico           VARCHAR(50) NOT NULL,
    diagnostico      VARCHAR(255) NOT NULL,
    observacao       VARCHAR(255) NOT NULL,
    id_paciente      NUMBER NOT NULL,
    CONSTRAINT consulta_pk PRIMARY KEY (id_consulta),
    CONSTRAINT consulta_paciente_fk FOREIGN KEY (id_paciente)
        REFERENCES pacientes(id_paciente)
);





--DML
--alter table
--ALTER TABLE nome_tabela ADD nome_atributo DATATYPE restricoes;
--ALTER TABLE nome_tabela ALTER COLUMN nome_atributo VARCHAR(30);
--ALTER TABLE nome_tabela DROP nome_atributo;

-- Apagando uma tabela;
--DROP TABLE nome_tabela;


-- insert
--INSERT INTO tbl_clientes VALUES (1,'ATV', 'Chicó',100);
--INSERT INTO {nome_da_tabela }( coluna1, coluna2, coluna3, colunaN )
--VALUES ( valor1, valor2, valor3, valorN );

--delete
--DELETE FROM tbl_clientes WHERE idade < 15;


--update
--UPDATE tbl_funcionarios
--SET situacao = 'demitido', data_demissao = current_date
--WHERE id = 5;

--Select 

--SELECT * FROM vendas, produtos WHERE vendas.nr_produto = produtos.nr_produto;
--SELECT data, produtos.nr_produto, nome_produto, quantidade, valor
--FROM vendas, produtos
--WHERE vendas.nr_produto = produtos.nr_produto ORDER BY data DESC;
--SELECT data, clientes.nome, produtos.nr_produto, nome_produto, quantidade, valor
--FROM vendas, produtos, clientes
--WHERE vendas.nr_produto = produtos.nr_produto AND vendas.nr_cliente = clientes.nr_clienteORDER BY data ASC;


--funções de agregação 

-- COUNT(quantidade) total_quantidade,
--COUNT(nr_cliente),
--COUNT(nr_produto),
--SUM(quantidade * valor)
--FROM vendas, produtos
--WHERE vendas.nr_produto = produtos.nr_produto;
--SELECT MIN(data), MAX(data) FROM vendas;
--SELECT nr_produto, SUM(quantidade * valor) AS total_vendas
--FROM vendas, produtos
--WHERE vendas.nr_produto = produtos.nr_produto;
--GROUP BY nr_produto;
